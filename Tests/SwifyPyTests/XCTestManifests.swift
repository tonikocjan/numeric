#if !canImport(ObjectiveC)
import XCTest

extension BandMatrixTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BandMatrixTests = [
        ("testCopyOnWrite", testCopyOnWrite),
        ("testDiagonal3x3Decomposition", testDiagonal3x3Decomposition),
        ("testDiagonal3x3Subscript", testDiagonal3x3Subscript),
        ("testIdentity", testIdentity),
        ("testIsDiagonalyDominant", testIsDiagonalyDominant),
        ("testLinearEquations1", testLinearEquations1),
        ("testMulitplyWithVector", testMulitplyWithVector),
        ("testPentaDiagonal4x4", testPentaDiagonal4x4),
        ("testPentaDiagonal5x5", testPentaDiagonal5x5),
        ("testPentaDiagonal6x6Decomposition", testPentaDiagonal6x6Decomposition),
        ("testTridiagonal3x3Subscript", testTridiagonal3x3Subscript),
        ("testTridiagonal4x4Decomposition", testTridiagonal4x4Decomposition),
        ("testTridiagonal4x4Subscript", testTridiagonal4x4Subscript),
    ]
}

extension LUSolverTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LUSolverTests = [
        ("testSolveSystemOfEquations", testSolveSystemOfEquations),
    ]
}

extension LowerBandMatrixTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LowerBandMatrixTests = [
        ("testCopyOnWrite", testCopyOnWrite),
        ("testDiagonal3x3Subscript", testDiagonal3x3Subscript),
        ("testIdentity", testIdentity),
        ("testIsDiagonalyDominant", testIsDiagonalyDominant),
        ("testMulitplyWithVector", testMulitplyWithVector),
        ("testUpperBidiagonal3x3Subscript", testUpperBidiagonal3x3Subscript),
        ("testUpperBidiagonal4x4Subscript", testUpperBidiagonal4x4Subscript),
    ]
}

extension MatrixTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MatrixTests = [
        ("testArithmetic", testArithmetic),
        ("testColumnFilter", testColumnFilter),
        ("testColumnMap", testColumnMap),
        ("testColumnReduce", testColumnReduce),
        ("testCopyOnWrite", testCopyOnWrite),
        ("testEquatable", testEquatable),
        ("testIdentity", testIdentity),
        ("testMatrixMultiplication", testMatrixMultiplication),
        ("testMulitplyWithVector", testMulitplyWithVector),
        ("testOnes", testOnes),
        ("testReduce", testReduce),
        ("testSubscript", testSubscript),
        ("testSwap", testSwap),
        ("testTransposed", testTransposed),
        ("testZeros", testZeros),
    ]
}

extension UpperBandMatrixTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UpperBandMatrixTests = [
        ("testCopyOnWrite", testCopyOnWrite),
        ("testDiagonal3x3Subscript", testDiagonal3x3Subscript),
        ("testIdentity", testIdentity),
        ("testIsDiagonalyDominant", testIsDiagonalyDominant),
        ("testMulitplyWithVector", testMulitplyWithVector),
        ("testUpperBidiagonal3x3Subscript", testUpperBidiagonal3x3Subscript),
        ("testUpperBidiagonal4x4Subscript", testUpperBidiagonal4x4Subscript),
    ]
}

extension VectorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VectorTests = [
        ("testArithmetic", testArithmetic),
        ("testCollection", testCollection),
        ("testComputedProperties", testComputedProperties),
        ("testCopyOnWrite", testCopyOnWrite),
        ("testEquatable", testEquatable),
        ("testIsEmpty", testIsEmpty),
        ("testSqrt", testSqrt),
        ("testSubscript", testSubscript),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BandMatrixTests.__allTests__BandMatrixTests),
        testCase(LUSolverTests.__allTests__LUSolverTests),
        testCase(LowerBandMatrixTests.__allTests__LowerBandMatrixTests),
        testCase(MatrixTests.__allTests__MatrixTests),
        testCase(UpperBandMatrixTests.__allTests__UpperBandMatrixTests),
        testCase(VectorTests.__allTests__VectorTests),
    ]
}
#endif
